#!/usr/bin/env python3

import pandas as pd
from sklearn import preprocessing
from wordcloud import WordCloud

SRC_FILE = './data/campaigns_summaries.parquet.gzip'


def extract_phrase_value(df, phrase_type):
    """
    Extract each phrase & related value from column of lists.
    Create new dataframe with each phrase & value in own row.

    :param df: dataframe with campaign details and summaries
    :param phrase_type: string ('details' or 'summary')
    :return: dataframe with 'phrase' and 'value' columns
    """
    phrases = [item for row in df[f'{phrase_type}_phrases'].tolist() for item in row]
    values = [item for row in df[f'{phrase_type}_values'].tolist() for item in row]
    combined = pd.DataFrame(data={'phrase': phrases,
                                  'value': values})
    return combined


def phrase_sum(df):
    return df.groupby('phrase')['value'].sum().reset_index()


def phrase_count(df):
    return df.groupby('phrase')['value'].count().reset_index()


# https://stackoverflow.com/questions/47143461/python-wordcloud-color-by-term-frequency
def my_tf_color_func(dictionary):
    def my_tf_color_func_inner(value, **kwargs):
        return "hsl(202, 71%%, %d%%)" % (100 * (1 - dictionary[value]))

    return my_tf_color_func_inner


def gen_wordcloud(df, img_name):
    """
    Generate word cloud and save png file.
    Normalize values between given range for my_tf_color_func(),
    convert dataframe to dictionary to use generate_from_frequencies().

    :param df: dataframe generated by phrase_sum() or phrase_count()
    :param img_name: string ({img_name}.png)
    :return: None
    """
    # Normalize according to desired hsl lightness values for use by my_tf_color_func()
    hsl_light = 0.9
    hsl_dark = 0.35
    df['value'] = preprocessing.minmax_scale(df['value'],
                                             feature_range=(1 - hsl_light, 1 - hsl_dark))

    # Convert df to dictionary to use generate_from_frequencies()
    # https://stackoverflow.com/questions/59148244/keeping-words-together-in-wordcloud
    freq_dict = df.set_index('phrase').to_dict()['value']

    wc = WordCloud(width=600,
                   height=600,
                   prefer_horizontal=1,
                   font_path='./fonts/HelveticaNeueBd.ttf',
                   background_color='white',
                   color_func=my_tf_color_func(freq_dict)
                   ).generate_from_frequencies(freq_dict)
    wc.to_file(f'./images/{img_name}.png')


if __name__ == '__main__':
    summaries = pd.read_parquet(SRC_FILE)

    details = extract_phrase_value(summaries, 'details')
    summary = extract_phrase_value(summaries, 'summary')

    details_sum = phrase_sum(details)
    summary_sum = phrase_sum(summary)

    details_count = phrase_count(details)
    summary_count = phrase_count(summary)

    gen_wordcloud(details_sum, 'details_sum')
    gen_wordcloud(summary_sum, 'summary_sum')
    gen_wordcloud(details_count, 'details_count')
    gen_wordcloud(summary_count, 'summary_count')
